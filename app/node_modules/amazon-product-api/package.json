{
  "name": "amazon-product-api",
  "version": "0.1.2",
  "description": "Amazon Product Advertising API client",
  "main": "./lib/index.js",
  "directories": {
    "lib": "./lib/"
  },
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "amazon",
    "aws",
    "product",
    "ads",
    "advertising"
  ],
  "author": {
    "name": "Dmitry Mazuro",
    "email": "dmitry.mazuro@icloud.com"
  },
  "license": "BSD-2-Clause",
  "dependencies": {
    "es6-promise": "~1.0.0",
    "xml2js": "^0.4.4",
    "request": "^2.36.0"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/t3chnoboy/amazon-product-api.git"
  },
  "bugs": {
    "url": "https://github.com/t3chnoboy/amazon-product-api/issues"
  },
  "homepage": "https://github.com/t3chnoboy/amazon-product-api",
  "readme": "# Node.js client for the Amazon Product Advertising API [![NPM version](https://badge.fury.io/js/amazon-product-api.svg)](http://badge.fury.io/js/amazon-product-api) [![Dependency Status](https://gemnasium.com/t3chnoboy/amazon-product-api.svg)](https://gemnasium.com/t3chnoboy/amazon-product-api) [![Build Status](https://travis-ci.org/t3chnoboy/amazon-product-api.svg?branch=master)](https://travis-ci.org/t3chnoboy/amazon-product-api)\n\nNode.js client for [Amazon Product Advertising API](https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html)  \n\n[![NPM](https://nodei.co/npm/amazon-product-api.png?downloads=true)](https://nodei.co/npm/amazon-product-api/)\n\nThe major differences between this project and other implementations are:\n\n  1. Item search can return an [EcmaScript6 promise](https://github.com/domenic/promises-unwrapping). (Check out a great article about [ES6 promises](http://www.html5rocks.com/en/tutorials/es6/promises/))  \n  2. Item search is [\"yieldable\"](https://github.com/visionmedia/co#yieldables). So it plays well with fantastic next-gen libs such as [Koa](https://github.com/koajs/koa) and [Co](https://github.com/visionmedia/co). See [example](https://github.com/t3chnoboy/apac2#setup-your-own-server-that-doesnt-require-signatures-and-timestamp-and-returns-json)  \n   \n\n\n## Installation\nInstall using npm:\n```sh\nnpm install amazon-product-api\n```\n\n## Usage\n\nRequire library\n```javascript\namazon = require('amazon-product-api');\n```\n\nCreate client\n```javascript\nvar client = amazon.createClient({\n\tawsId: \"aws ID\",\n\tawsSecret: \"aws Secret\",\n \tawsTag: \"aws Tag\"\n});\n```\n\nNow you can search for items on amazon:\n\nusing promises:\n```javascript\nclient.itemSearch({\n\tkeywords: 'Pulp fiction',\n\tsearchIndex: 'DVD',\n    responseGroup: 'ItemAttributes,Offers,Images'\n}).then(function(results){\n\tconsole.log(results);\n}).catch(function(err){\n\tconsole.log(err);\n});\n```\n\nusing a callback:\n```javascript\nclient.itemSearch({\n  keywords: 'Pulp fiction',\n  searchIndex: 'DVD',\n  responseGroup: 'ItemAttributes,Offers,Images'\n}, function(err, results) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(results);\n  }\n});\n```\n\nusing ecmascript6 generators and co:\n```javascript\nvar co = require('co');\n\nco(function *(){\n\n  pulpFiction   = client.itemSearch({ keywords: 'Pulp fiction',   searchIndex: 'DVD'});\n  killBill      = client.itemSearch({ keywords: 'Kill Bill',      searchIndex: 'DVD'});\n  reservoirDogs = client.itemSearch({ keywords: 'Reservoir Dogs', searchIndex: 'DVD'});\n\n  movies = yield [pulpFiction, killBill, reservoirDogs];\n  console.log(movies);\n\n})();\n```\n\n###Search query options:\n\n[condition:](http://docs.aws.amazon.com/AWSECommerceService/latest/DG/ItemSearch.html) availiable options - 'All', 'New', 'Used', 'Refurbished', 'Collectible'. Defaults to 'All'  \n[keywords:](http://docs.aws.amazon.com/AWSECommerceService/latest/DG/ItemSearch.html) Defaults to ''  \n[responseGroup:](http://docs.aws.amazon.com/AWSECommerceService/latest/DG/CHAP_ResponseGroupsList.html) You can use multiple values by separating them with comma (e.g responseGroup: 'ItemAttributes,Offers,Images'). Defaults to'ItemAttributes'  \n[searchIndex:](http://docs.aws.amazon.com/AWSECommerceService/latest/DG/USSearchIndexParamForItemsearch.html) Defaults to 'All'.  \ndomain: Defaults to 'webservices.amazon.com'.\n\n##Example\n###Setup your own server that doesn't require signatures and timestamp\n```javascript\nvar amazon = require('amazon-product-api'),\n\tkoa = require('koa'),\n\trouter = require('koa-router');\n\nvar app = koa();\napp.use(router(app));\n\n\nvar client = amazon.createClient({\n  awsTag: process.env.AWS_TAG,\n  awsId: process.env.AWS_ID,\n  awsSecret: process.env.AWS_SECRET\n});\n\n\napp.get('/amazon/:index', function* (){\n  this.body = yield client.itemSearch({\n    keywords: this.query.title,\n    searchIndex: this.params.index,\n    responseGroup: 'ItemAttributes,Offers,Images'\n  });\n});\n\napp.listen(3000);\n```\n\nWorking demo:  \n[Search for Alien DVDs](http://watchlist-koa.herokuapp.com/amazon/DVD?title=alien)  \n[Search for Streets of Rage videogame](http://watchlist-koa.herokuapp.com/amazon/VideoGames?title=streets%20of%20rage)  \n[Search for shoes](http://watchlist-koa.herokuapp.com/amazon/Shoes?title=nike%20nevis)\n",
  "readmeFilename": "README.md",
  "_id": "amazon-product-api@0.1.2",
  "_from": "amazon-product-api@"
}
